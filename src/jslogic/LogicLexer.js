// Generated from Logic.g4 by ANTLR 4.9.3
// jshint ignore: start
import antlr4 from 'antlr4';


import Ast from "./ast";



const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0002\rT\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0004\u0003",
    "\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\'\n\u0005\u0003\u0006\u0003\u0006\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u00075\n\u0007\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b?",
    "\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t",
    "H\n\t\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\f\u0006\fO\n\f\r",
    "\f\u000e\fP\u0003\f\u0003\f\u0002\u0002\r\u0003\u0003\u0005\u0004\u0007",
    "\u0005\t\u0006\u000b\u0007\r\b\u000f\t\u0011\n\u0013\u000b\u0015\f\u0017",
    "\r\u0003\u0002\t\u0005\u0002##\u0080\u0080\u00ae\u00ae\u0005\u0002,",
    ",\u2024\u2024\u2229\u2229\u0004\u0002--\u222a\u222a\u0005\u0002``\u2297",
    "\u2297\u22bd\u22bd\u0004\u0002C\\c|\u0003\u000223\u0005\u0002\u000b",
    "\f\u000f\u000f\"\"\u0002`\u0002\u0003\u0003\u0002\u0002\u0002\u0002",
    "\u0005\u0003\u0002\u0002\u0002\u0002\u0007\u0003\u0002\u0002\u0002\u0002",
    "\t\u0003\u0002\u0002\u0002\u0002\u000b\u0003\u0002\u0002\u0002\u0002",
    "\r\u0003\u0002\u0002\u0002\u0002\u000f\u0003\u0002\u0002\u0002\u0002",
    "\u0011\u0003\u0002\u0002\u0002\u0002\u0013\u0003\u0002\u0002\u0002\u0002",
    "\u0015\u0003\u0002\u0002\u0002\u0002\u0017\u0003\u0002\u0002\u0002\u0003",
    "\u0019\u0003\u0002\u0002\u0002\u0005\u001b\u0003\u0002\u0002\u0002\u0007",
    "\u001d\u0003\u0002\u0002\u0002\t&\u0003\u0002\u0002\u0002\u000b(\u0003",
    "\u0002\u0002\u0002\r4\u0003\u0002\u0002\u0002\u000f>\u0003\u0002\u0002",
    "\u0002\u0011G\u0003\u0002\u0002\u0002\u0013I\u0003\u0002\u0002\u0002",
    "\u0015K\u0003\u0002\u0002\u0002\u0017N\u0003\u0002\u0002\u0002\u0019",
    "\u001a\u0007*\u0002\u0002\u001a\u0004\u0003\u0002\u0002\u0002\u001b",
    "\u001c\u0007+\u0002\u0002\u001c\u0006\u0003\u0002\u0002\u0002\u001d",
    "\u001e\u0007<\u0002\u0002\u001e\b\u0003\u0002\u0002\u0002\u001f \u0007",
    "p\u0002\u0002 !\u0007q\u0002\u0002!\'\u0007v\u0002\u0002\"#\u0007P\u0002",
    "\u0002#$\u0007Q\u0002\u0002$\'\u0007V\u0002\u0002%\'\t\u0002\u0002\u0002",
    "&\u001f\u0003\u0002\u0002\u0002&\"\u0003\u0002\u0002\u0002&%\u0003\u0002",
    "\u0002\u0002\'\n\u0003\u0002\u0002\u0002()\u0007)\u0002\u0002)\f\u0003",
    "\u0002\u0002\u0002*+\u0007c\u0002\u0002+,\u0007p\u0002\u0002,5\u0007",
    "f\u0002\u0002-.\u0007C\u0002\u0002./\u0007P\u0002\u0002/5\u0007F\u0002",
    "\u000205\u0007(\u0002\u000212\u0007(\u0002\u000225\u0007(\u0002\u0002",
    "35\t\u0003\u0002\u00024*\u0003\u0002\u0002\u00024-\u0003\u0002\u0002",
    "\u000240\u0003\u0002\u0002\u000241\u0003\u0002\u0002\u000243\u0003\u0002",
    "\u0002\u00025\u000e\u0003\u0002\u0002\u000267\u0007q\u0002\u00027?\u0007",
    "t\u0002\u000289\u0007Q\u0002\u00029?\u0007T\u0002\u0002:?\u0007~\u0002",
    "\u0002;<\u0007~\u0002\u0002<?\u0007~\u0002\u0002=?\t\u0004\u0002\u0002",
    ">6\u0003\u0002\u0002\u0002>8\u0003\u0002\u0002\u0002>:\u0003\u0002\u0002",
    "\u0002>;\u0003\u0002\u0002\u0002>=\u0003\u0002\u0002\u0002?\u0010\u0003",
    "\u0002\u0002\u0002@A\u0007z\u0002\u0002AB\u0007q\u0002\u0002BH\u0007",
    "t\u0002\u0002CD\u0007Z\u0002\u0002DE\u0007Q\u0002\u0002EH\u0007T\u0002",
    "\u0002FH\t\u0005\u0002\u0002G@\u0003\u0002\u0002\u0002GC\u0003\u0002",
    "\u0002\u0002GF\u0003\u0002\u0002\u0002H\u0012\u0003\u0002\u0002\u0002",
    "IJ\t\u0006\u0002\u0002J\u0014\u0003\u0002\u0002\u0002KL\t\u0007\u0002",
    "\u0002L\u0016\u0003\u0002\u0002\u0002MO\t\b\u0002\u0002NM\u0003\u0002",
    "\u0002\u0002OP\u0003\u0002\u0002\u0002PN\u0003\u0002\u0002\u0002PQ\u0003",
    "\u0002\u0002\u0002QR\u0003\u0002\u0002\u0002RS\b\f\u0002\u0002S\u0018",
    "\u0003\u0002\u0002\u0002\b\u0002&4>GP\u0003\b\u0002\u0002"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class LogicLexer extends antlr4.Lexer {

    static grammarFileName = "Logic.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'('", "')'", "':'", null, "'''" ];
	static symbolicNames = [ null, null, null, null, "NOT", "POSTNOT", "AND", 
                          "OR", "XOR", "ID", "BIT", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "NOT", "POSTNOT", "AND", "OR", 
                      "XOR", "ID", "BIT", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

LogicLexer.EOF = antlr4.Token.EOF;
LogicLexer.T__0 = 1;
LogicLexer.T__1 = 2;
LogicLexer.T__2 = 3;
LogicLexer.NOT = 4;
LogicLexer.POSTNOT = 5;
LogicLexer.AND = 6;
LogicLexer.OR = 7;
LogicLexer.XOR = 8;
LogicLexer.ID = 9;
LogicLexer.BIT = 10;
LogicLexer.WS = 11;



